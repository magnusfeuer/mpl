// (C) 2021 Magnus Feuer
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// MPL Language
//

root: (application | library | statement)*

library: LIBRARY PRIMITIVE_SYMBOL compound_statement
application: APPLICATION PRIMITIVE_SYMBOL compound_statement

statement: compound_statement 
           | (type_declaration ";")
           | (variable_declaration ";")
           | (script)
           | (array_declaration ";")
           | (assign ";")
           | (subscribe ";")
           | (expression ";")
           | foreach
           | if
           | ";"

script: SCRIPT PRIMITIVE_SYMBOL (WHEN expression)? compound_statement

compound_statement: "{" statement* "}"

//
// TYPE DECLARATION
//
type_declaration: "type" PRIMITIVE_SYMBOL "{" type_member* "}" 
type_member: (variable_declaration | array_declaration) ";"

?datatype: primitive_type | symbol
?primitive_type: MPL_SIGNED | MPL_UNSIGNED
              | MPL_BOOL | MPL_BYTE 
              | MPL_CHAR | MPL_FLOAT 
              | MPL_STRING

//
// VARIABLE DECLARATION
//
variable_declaration: [event] datatype PRIMITIVE_SYMBOL ((ASSIGN expression) | (SUBSCRIBE expression))? 

//
// ARRAY DECLARATION
//
array_declaration: [event] datatype PRIMITIVE_SYMBOL ("[" (range_spec | expression | INT)?"]")+ ("=" array_init)? 
range_spec: (expression ":" expression)
array_init: "{" ((expression | array_init) ("," (expression | array_init ))*)? "}"

//
// EVENT SPEC
//
?event: (INPUT|OUTPUT)? EVENT

//
// FUNCTION CALL
//
func_call: symbol "(" [ arg_list ] ")"
arg_list: expression ("," expression)* 


//
// INSTANTIATION
//
// FIXME: Require "@" for all instantiations. Currently not needed in compound init.
// -or-
// FIXME: Replace "@" with "new" for clarification
// -or-
// FIXME" Skip instantiation and have every type reference be an instantiation?
//
instantiation: [INSTANTIATE] (primitive_type | symbol) "{" ( element_init ("," element_init)*)? "}"
element_init: (PRIMITIVE_SYMBOL ASSIGN (expression | array_init)) 
              | (PRIMITIVE_SYMBOL SUBSCRIBE expression) 

//
// VARIOUS
// 
assign: symbol assign_oper (expression | array_init)
?assign_oper: ASSIGN
              | ADD_ASSIGN
              | SUB_ASSIGN
              | MUL_ASSIGN
              | DIV_ASSIGN
              | MOD_ASSIGN
              | LSHIFT_ASSIGN
              | RSHIFT_ASSIGN
              | AND_ASSIGN
              | OR_ASSIGN
              | XOR_ASSIGN



subscribe: symbol SUBSCRIBE expression
if: "if" "(" expression ")" compound_statement
foreach: "foreach" symbol "in" "[" range_spec "]" compound_statement

//
// EXPRESSION
//
expression: ("(" expression ")") | operator | const | instantiation | symbol | func_call

//
// SYMBOL GRAMMAR
//
symbol: [GLOBAL] PRIMITIVE_SYMBOL index* ("." PRIMITIVE_SYMBOL index*)*
index: "[" expression "]"

//
// OPERATOR
//
EQ: "=="
LT: "<"
GT: ">"
LTE: "<="
GTE: ">="
NE: "!="
AND: "&&"
OR: "||"
NOT: "!"
LSHIFT: "<<"
RSHIFT: ">>"
operator: arit_mul
          | arit_div
          | arit_mod
          | arit_add
          | arit_sub
          | lhs EQ rhs
          | lhs LT rhs
          | lhs GT rhs
          | lhs LTE rhs
          | lhs GTE rhs
          | lhs NE rhs
          | lhs AND rhs
          | lhs OR rhs
          | lhs LSHIFT rhs
          | lhs RSHIFT rhs
          | NOT expression

arit_mul: lhs "*" rhs
arit_div: lhs "/" rhs
arit_mod: lhs "%" rhs
arit_add: lhs "+" rhs
arit_sub: lhs "-" rhs // Higher priority than CONST_INT (that can be -3)

lhs.2: expression
rhs.1: expression

// Constant values
//
?const: CONST_TRUE
       | CONST_FALSE
       | SIGNED_INT
       | CONST_HEX
       | CONST_BIN
       | CONST_FLOAT
       | CONST_STRING

CONST_TRUE: "true"
CONST_FALSE: "false"

// Prio 2 because 0xAB should not be parsed as CONST_INT(0) PRIMITIVE_SYMBOL(xAB)
CONST_HEX.2: HEX_NUMBER 

// Prio 2 because 0b01 should not be parsed as CONST_INT(0) PRIMITIVE_SYMBOL(b01)
CONST_BIN.2: BIN_NUMBER

CONST_FLOAT:  (SIGNED_FLOAT | FLOAT) 
CONST_STRING: ESCAPED_STRING

// Non-qualified name. No periods.
// Example: my_variable
PRIMITIVE_SYMBOL: ("_"|LETTER) ("_"|LETTER|DIGIT)*


APPLICATION: "application"
LIBRARY: "library"
WHEN: "when"
INPUT: "input"
OUTPUT: "output"
EVENT: "event"
SCRIPT: "script"
INSTANTIATE: "@"
GLOBAL: "."
SUBSCRIBE: "<-"

ASSIGN: "="
ADD_ASSIGN: "+="
SUB_ASSIGN: "-="
MUL_ASSIGN: "*="
DIV_ASSIGN: "/="
MOD_ASSIGN: "%="
LSHIFT_ASSIGN: "<<="
RSHIFT_ASSIGN: ">>="
AND_ASSIGN: "&="
OR_ASSIGN: "|="
XOR_ASSIGN: "^="



MPL_SIGNED: "signed"
MPL_UNSIGNED: "unsigned"
MPL_BOOL: "bool"
MPL_CHAR: "char"
MPL_BYTE: "byte"
MPL_FLOAT: "float"
MPL_STRING: "string"


%import common.INT
%import common.SIGNED_INT
%import common.CPP_COMMENT
%import common.C_COMMENT
%import common.WS
%import common.LETTER
%import common.DIGIT
%import common.DECIMAL
%import common.FLOAT
%import common.DOUBLE
%import common.SIGNED_FLOAT
// %import common._EXP
%import common.ESCAPED_STRING
%import python.HEX_NUMBER
%import python.BIN_NUMBER
%ignore WS
%ignore CPP_COMMENT
%ignore C_COMMENT
